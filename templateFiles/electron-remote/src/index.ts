import { app, BrowserWindow, ipcMain } from 'electron';
import chalk from 'chalk';
import path from 'path';
import { readFileSync } from 'fs-extra';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const prefix = `${chalk.grey('[')}${chalk.green('Electron Host Process')}${chalk.grey(']')}`

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 600,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
    icon: path.resolve(__dirname, 'static', 'favicon.png'),
    darkTheme: true,
    minHeight: 400,
    minWidth: 400,
    title: 'Electron Express',
    backgroundColor: '#1a1a1a',
    hasShadow: false,
    roundedCorners: true,
    // if you want to handle your own taskbar:
    // transparent: true,
    // frame: false,
  });
  console.log(`${prefix} Loading Loader...`);
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  console.log(`${prefix} Loading App...`);
  mainWindow.loadURL(readFileSync(path.resolve(__dirname, 'static', 'url.txt'), 'utf-8'));
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('ready', () => {
  // 2nd arg to handle can be asynchronous!
  ipcMain.handle('greet', (event, name?: string) => `Hello from Electron Main Process, ${name ?? 'User'}!`)
})

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
